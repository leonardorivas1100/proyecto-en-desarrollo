Implementacion en seco del Json Web Tokken.
 - Ya se sabe que el Jwt es un mecanismo de autenticacion, que permite a un usuario generar un token unico,
 como una llave unica para identificarlo cuando inicie sesion. Este token incluye información encriptada 
 (como el id del usuario) y puede ser usado por el frontend para:
    - Identificar al usuario en futuras solicitudes.
    - Proteger rutas privadas.
    - Verificar que la sesión del usuario sigue activa.

- Basicamente este mecanismo se usa para agregar seguridad al proyecto que estoy desarrollando. El token 
contiene 3 partes; header, payload y signature, cada uno separado por puntos pero unidos.

    #Codigo generalizado

->    const token = jwt.sign({ id: user._id }, 'your_secret_key', { expiresIn: '1h' });
        *Anotacion: Esta linea de codigo es la que en conclusion genera el token detras de toda la logica
        osea es una linea de codigo importante.



    - Explicacion:
        ° jwt.sign(): Es una función del paquete jsonwebtoken que genera un token único.El token contiene
         3 partes codificadas en base64:

            Header: Información sobre el algoritmo de firma.
            Payload: Datos que deseas incluir, como el id del usuario.
            Signature: La parte encriptada que asegura la validez del token usando tu clave secreta.


            Clave secreta: 'your_secret_key'
            Es la "llave" que tu backend utiliza para firmar el token. Es muy importante mantenerla segura, 
            ya que cualquiera que la tenga podría generar tokens válidos.


            Configuración extra: { expiresIn: '1h' }
            Define la duración del token. En este caso, el token expirará en 1 hora.


    - Su respuesta osea lo que generara sera una cadena de texto como esta:
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        .eyJpZCI6IjY0N2Y5MmU1OGUxMjM0NTY3ODlhYmNkIiwiaWF0IjoxNjg3MTkwNTA3LCJleHAiOjE2ODcyMjY1MDd9
        .3V7R_VYTRK5VkZwTnqcHp7JXGglz3vB2zMSL6UQpmKk

        - Primera parte: Información del algoritmo (eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9).
        - Segunda parte: Datos del usuario (eyJpZCI6IjY0N2...).
        - Tercera parte: Firma encriptada para validar el token (3V7R_VYTRK...).







Implementacion paso a paso.
Para no perderse entre codigo guiarse por los numeros de
esta linea:
|
|
|
|

1. Primera parte de la implementacion:
    - Para comenzar a implementar el token se debe dar por hecho lo entendido sobre 
    el token, osea se necesita un modelo de usuario que tenga los campos que tenga debe
    tener los campos, correo y contraseña, ya que sin estos campos no se podrá verficar 
    el token.

    - Antes de que empieces a implementar todo el token y toda esta vaina, primero:
    genera la Api de un usuario, osea; aqui abajo estoy dejando un esquema si, entonces
    para completar esta api de usuario falta el controlador de usuario, la ruta en el 
    archivo de rutas, su llamado en el index y su request.http, o bueno la logica pues.

    *Se necesita tener un usuario registrado en la base de datos ya que si no hay 
    usuario resgitrado, no hay usuario para autenticar valga la redondancia, y por 
    buena practica se hace el registro haciendo la api como lo hemos venido haciendo
    todo el trimestre.. 

    * instalar esta dependencia bcryptjs en el backend (npm install bcryptjs)


                *Ejemplo de modelo de usuario:

                import mongoose from 'mongoose';
                import bcrypt from 'bcryptjs';

                const usuarioSchema = new mongoose.Schema({

                email: {                    Simpre debe haber un correo
                    type: String,
                    required: true,
                    unique: true,  
                },
                
                password: {                 Siempre debe haber una contrasña 
                    type: String, 
                    required: true 
                },

                nombres: { 
                    type: String,
                    required: true
                },

                apellidos: { 
                    type: String,
                    required: true 
                },

                telefono: {
                    type: String,
                    required: true,
                    unique: true,  
                }, { timestamps: true });

                usuarioSchema.pre('save', async function (next) {
                    if (this.isModified('password') || this.isNew) {
                        this.password = await bcrypt.hash(this.password, 10); // Encriptamos la contraseña con un saltRounds de 10
                    }
                    next();
                });

                // Modelo de Usuario
                const Usuario = mongoose.model('Usuario', usuarioSchema);

                export default Usuario;


    - Implementar en el modelo de usuario la logica para encriptar la contraseña.
        .La logica implementada fue la siguiente:
        -> 

                import bcrypt from 'bcryptjs';  
                // Middleware para encriptar la contraseña antes de guardarla
                    usuarioSchema.pre('save', async function (next) {
                        if (this.isModified('password') || this.isNew) {
                            this.password = await bcrypt.hash(this.password, 10); // Encriptamos la contraseña con un saltRounds de 10
                        }
                        next();
                    });



2. Segunda parte de la implementacion:
    - Instalar las dependecias necesarias para cargar las variables de 
    entorno (dotenv) y la dependecia para generar los token (jsonwebtoken)

    - Luego definir la variable de entorno en el archivo .env, que es 
    asi: 
            ->
            JWT_SECRET=messigod    *Tu defines la contraseña que quieras aqui 



3. Tercera parte de la implementacion:
    - Cofigurar el dotenv en el index, osea:

            import dotenv from 'dotenv';

            dotenv.config();


4. Cuarta parte de la implementacion:
    - En la carpeta de controladores, crear el archivo de control de 
    autenticacion (authController.js).

    - Dentro de este archivo se debe definir las funciones que manejen
    el inicio de sesion y la generacion de tokens, yo lo hice de esta manera: 

                import jwt from 'jsonwebtoken';
                import bcrypt from 'bcryptjs';
                import Usuario from '../models/usuarios_model.js'; // Ajusta la ruta al modelo
                import dotenv from 'dotenv';

                // Configurar dotenv para leer variables de entorno
                dotenv.config();

                // Función para generar un token JWT
                const generarToken = (usuario) => {
                return jwt.sign(
                    { 
                    id: usuario._id, 
                    email: usuario.email, 
                    nombres: usuario.nombres, // Agrega nombres si está en tu modelo
                    apellidos: usuario.apellidos, // Agrega apellidos si está en tu modelo
                    roles: usuario.id_rol // Cambia esto si los roles están estructurados de otra forma
                    },
                    process.env.JWT_SECRET, // Clave secreta desde el archivo .env
                    { expiresIn: '12h' } // Tiempo de expiración del token
                );
                };

                // Controlador para manejar el inicio de sesión
                const login = async (req, res) => {
                const { email, password } = req.body; // Captura los datos enviados por el cliente

                try {
                    // Verificar si el usuario existe
                    const usuario = await Usuario.findOne({ email });
                    if (!usuario) {
                    return res.status(404).json({ message: 'Usuario no encontrado' });
                    }

                    // Verificar si la contraseña es válida
                    const esValida = await bcrypt.compare(password, usuario.password);
                    if (!esValida) {
                    return res.status(401).json({ message: 'Contraseña incorrecta' });
                    }

                    // Generar el token JWT
                    const token = generarToken(usuario);

                    // Enviar la respuesta con el token
                    res.status(200).json({ 
                    message: '¡Inicio de sesión exitoso!',
                    Token_generado: token 
                    });
                } catch (error) {
                    console.error('Error en el login:', error.message);
                    res.status(500).json({ 
                    message: 'Error interno del servidor', 
                    error: error.message 
                    });
                }
                };

                export { login };



5. Quinta parte de la implementacion
    - Creamos el archvio de rutas llamado auth_routes.js. Alli definimos la ruta para el 
    inicio de sesion y la generacion de tokens.
    *Creo que no es necesario explicar esto..

    - Luego hacemos el llamado en el servidor(index), de la ruta definida para el inicio de sesion
    *Tampoco esto

    - Por ultimo se hace el Request en un archivo .http, entonces al momento de hacer la Request
    este se hara de forma que sea una solicitud (Post), colocando los campos exigidos que son
    el correo y la contraseña asi:
                ->

                ### Probar inicio de sesión
                POST http://localhost:10000/api/auth/login
                Content-Type: application/json

                {
                    "email": "juan@gmail.com",
                    "password": "juan123" 
                    # Siempre escribir la contraseña no encriptada
                }



6. Sexta parte de la implementacion:
    - Para poder probar la autenticacion se necesita tener un usuario creado, entonces en mi caso
    tenia que tener un post para los usuarios que fuera a registrar y registrarlo desde mi 
    controlador, ruta, servidor y request, pero por buena practica. Pero si no hay mucho tiempo
    este usuario puede resgistrarse directamente de cualquier manera siempre y cuando cumpla
    con el correo y la contraseña que se esta exigiendo en la autenticacion.

    - Para este punto el token ya simplemente se genera, no hace ninguna funcion aun, pero 
    debo decir que una vez entendido todo hasta aqui será un poco mas facil mirar como 
    funciona y sinceramente creo que lo demás será un poco mas facil..

    la respuesta del request deberia ser asi a este punto, si no es asi, o cambio algo o
    esta algo mal:

                HTTP/1.1 200 OK
                X-Powered-By: Express
                Access-Control-Allow-Origin: *
                Content-Type: application/json; charset=utf-8
                Content-Length: 381
                ETag: W/"17d-q+n6LVE6GnuMdMC/UNQ4dNFHYkA"
                Date: Tue, 10 Dec 2024 06:52:00 GMT
                Connection: close

                {
                "message": "¡Inicio de sesión exitoso!",
                "Token_generado": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                .eyJpZCI6IjY3NTdkOWJlYTQ3YWFhOTkwYzI1OTJkNCIsImVtYWlsIjoianVhbkBnbWFpbC5jb20iLCJub21icmVzIjoiSnVhbiBQYWJsbyIsImFwZWxsaWRvcyI6IkRpYXogQmFsY2F6YXIiLCJyb2xlcyI6IjY3NTNkZTFhYjJiNjgzNmVlNDE4OTJiMyIsImlhdCI6MTczMzgxMzUyMCwiZXhwIjoxNzMzODU2NzIwfQ
                .rz1zBCEOJnemJ2IRM67O9VbM_QHgJV_taTbuhoR8yeQ"
                }




            